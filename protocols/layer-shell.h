//
// DON'T EDIT. THIS FILE HAS BEEN GENERATED BY wayland-scanner++
//

#pragma once

#include <array>
#include <functional>
#include <memory>
#include <string>
#include <vector>

#include <wayland-client.hpp>
#include <wayland-client-protocol-extra.hpp>

struct zwlr_layer_shell_v1;
struct zwlr_layer_surface_v1;

namespace wayland
{
class zwlr_layer_shell_v1_t;
enum class zwlr_layer_shell_v1_error : uint32_t;
enum class zwlr_layer_shell_v1_layer : uint32_t;
class zwlr_layer_surface_v1_t;
enum class zwlr_layer_surface_v1_keyboard_interactivity : uint32_t;
enum class zwlr_layer_surface_v1_error : uint32_t;
struct zwlr_layer_surface_v1_anchor;

namespace detail
{
  extern const wl_interface zwlr_layer_shell_v1_interface;
  extern const wl_interface zwlr_layer_surface_v1_interface;
}

/** \brief create surfaces that are layers of the desktop

      Clients can use this interface to assign the surface_layer role to
      wl_surfaces. Such surfaces are assigned to a "layer" of the output and
      rendered with a defined z-depth respective to each other. They may also be
      anchored to the edges and corners of a screen and specify input handling
      semantics. This interface should be suitable for the implementation of
      many desktop shell components, and a broad number of other applications
      that interact with the desktop.
    
*/
class zwlr_layer_shell_v1_t : public proxy_t
{
private:
  struct events_t : public detail::events_base_t
  {
  };

  static int dispatcher(uint32_t opcode, const std::vector<detail::any>& args, const std::shared_ptr<detail::events_base_t>& e);

  zwlr_layer_shell_v1_t(proxy_t const &wrapped_proxy, construct_proxy_wrapper_tag /*unused*/);

public:
  zwlr_layer_shell_v1_t();
  explicit zwlr_layer_shell_v1_t(const proxy_t &proxy);
  zwlr_layer_shell_v1_t(zwlr_layer_shell_v1 *p, wrapper_type t = wrapper_type::standard);

  zwlr_layer_shell_v1_t proxy_create_wrapper();

  static const std::string interface_name;

  operator zwlr_layer_shell_v1*() const;

  /** \brief create a layer_surface from a surface
      \param surface 
      \param output 
      \param layer layer to add this surface to
      \param name_space namespace for the layer surface

        Create a layer surface for an existing surface. This assigns the role of
        layer_surface, or raises a protocol error if another role is already
        assigned.

        Creating a layer surface from a wl_surface which has a buffer attached
        or committed is a client error, and any attempts by a client to attach
        or manipulate a buffer prior to the first layer_surface.configure call
        must also be treated as errors.

        After creating a layer_surface object and setting it up, the client
        must perform an initial commit without any buffer attached.
        The compositor will reply with a layer_surface.configure event.
        The client must acknowledge it and is then allowed to attach a buffer
        to map the surface.

        You may pass NULL for output to allow the compositor to decide which
        output to use. Generally this will be the one that the user most
        recently interacted with.

        Clients can specify a namespace that defines the purpose of the layer
        surface.
      
  */
  zwlr_layer_surface_v1_t get_layer_surface(surface_t const& surface, output_t const& output, zwlr_layer_shell_v1_layer const& layer, std::string const& name_space);

  /** \brief Minimum protocol version required for the \ref get_layer_surface function
  */
  static constexpr std::uint32_t get_layer_surface_since_version = 1;

};

/** \brief 

  */
enum class zwlr_layer_shell_v1_error : uint32_t
  {
  /** \brief wl_surface has another role */
  role = 0,
  /** \brief layer value is invalid */
  invalid_layer = 1,
  /** \brief wl_surface has a buffer attached or committed */
  already_constructed = 2
};

/** \brief available layers for surfaces

        These values indicate which layers a surface can be rendered in. They
        are ordered by z depth, bottom-most first. Traditional shell surfaces
        will typically be rendered between the bottom and top layers.
        Fullscreen shell surfaces are typically rendered at the top layer.
        Multiple surfaces can share a single layer, and ordering within a
        single layer is undefined.
      
  */
enum class zwlr_layer_shell_v1_layer : uint32_t
  {
  background = 0,
  bottom = 1,
  top = 2,
  overlay = 3
};


/** \brief layer metadata interface

      An interface that may be implemented by a wl_surface, for surfaces that
      are designed to be rendered as a layer of a stacked desktop-like
      environment.

      Layer surface state (layer, size, anchor, exclusive zone,
      margin, interactivity) is double-buffered, and will be applied at the
      time wl_surface.commit of the corresponding wl_surface is called.

      Attaching a null buffer to a layer surface unmaps it.

      Unmapping a layer_surface means that the surface cannot be shown by the
      compositor until it is explicitly mapped again. The layer_surface
      returns to the state it had right after layer_shell.get_layer_surface.
      The client can re-map the surface by performing a commit without any
      buffer attached, waiting for a configure event and handling it as usual.
    
*/
class zwlr_layer_surface_v1_t : public proxy_t
{
private:
  struct events_t : public detail::events_base_t
  {
    std::function<void(uint32_t, uint32_t, uint32_t)> configure;
    std::function<void()> closed;
  };

  static int dispatcher(uint32_t opcode, const std::vector<detail::any>& args, const std::shared_ptr<detail::events_base_t>& e);

  zwlr_layer_surface_v1_t(proxy_t const &wrapped_proxy, construct_proxy_wrapper_tag /*unused*/);

public:
  zwlr_layer_surface_v1_t();
  explicit zwlr_layer_surface_v1_t(const proxy_t &proxy);
  zwlr_layer_surface_v1_t(zwlr_layer_surface_v1 *p, wrapper_type t = wrapper_type::standard);

  zwlr_layer_surface_v1_t proxy_create_wrapper();

  static const std::string interface_name;

  operator zwlr_layer_surface_v1*() const;

  /** \brief sets the size of the surface
      \param width 
      \param height 

        Sets the size of the surface in surface-local coordinates. The
        compositor will display the surface centered with respect to its
        anchors.

        If you pass 0 for either value, the compositor will assign it and
        inform you of the assignment in the configure event. You must set your
        anchor to opposite edges in the dimensions you omit; not doing so is a
        protocol error. Both values are 0 by default.

        Size is double-buffered, see wl_surface.commit.
      
  */
  void set_size(uint32_t width, uint32_t height);

  /** \brief Minimum protocol version required for the \ref set_size function
  */
  static constexpr std::uint32_t set_size_since_version = 1;

  /** \brief configures the anchor point of the surface
      \param anchor 

        Requests that the compositor anchor the surface to the specified edges
        and corners. If two orthogonal edges are specified (e.g. 'top' and
        'left'), then the anchor point will be the intersection of the edges
        (e.g. the top left corner of the output); otherwise the anchor point
        will be centered on that edge, or in the center if none is specified.

        Anchor is double-buffered, see wl_surface.commit.
      
  */
  void set_anchor(zwlr_layer_surface_v1_anchor const& anchor);

  /** \brief Minimum protocol version required for the \ref set_anchor function
  */
  static constexpr std::uint32_t set_anchor_since_version = 1;

  /** \brief configures the exclusive geometry of this surface
      \param zone 

        Requests that the compositor avoids occluding an area with other
        surfaces. The compositor's use of this information is
        implementation-dependent - do not assume that this region will not
        actually be occluded.

        A positive value is only meaningful if the surface is anchored to one
        edge or an edge and both perpendicular edges. If the surface is not
        anchored, anchored to only two perpendicular edges (a corner), anchored
        to only two parallel edges or anchored to all edges, a positive value
        will be treated the same as zero.

        A positive zone is the distance from the edge in surface-local
        coordinates to consider exclusive.

        Surfaces that do not wish to have an exclusive zone may instead specify
        how they should interact with surfaces that do. If set to zero, the
        surface indicates that it would like to be moved to avoid occluding
        surfaces with a positive exclusive zone. If set to -1, the surface
        indicates that it would not like to be moved to accommodate for other
        surfaces, and the compositor should extend it all the way to the edges
        it is anchored to.

        For example, a panel might set its exclusive zone to 10, so that
        maximized shell surfaces are not shown on top of it. A notification
        might set its exclusive zone to 0, so that it is moved to avoid
        occluding the panel, but shell surfaces are shown underneath it. A
        wallpaper or lock screen might set their exclusive zone to -1, so that
        they stretch below or over the panel.

        The default value is 0.

        Exclusive zone is double-buffered, see wl_surface.commit.
      
  */
  void set_exclusive_zone(int32_t zone);

  /** \brief Minimum protocol version required for the \ref set_exclusive_zone function
  */
  static constexpr std::uint32_t set_exclusive_zone_since_version = 1;

  /** \brief sets a margin from the anchor point
      \param top 
      \param right 
      \param bottom 
      \param left 

        Requests that the surface be placed some distance away from the anchor
        point on the output, in surface-local coordinates. Setting this value
        for edges you are not anchored to has no effect.

        The exclusive zone includes the margin.

        Margin is double-buffered, see wl_surface.commit.
      
  */
  void set_margin(int32_t top, int32_t right, int32_t bottom, int32_t left);

  /** \brief Minimum protocol version required for the \ref set_margin function
  */
  static constexpr std::uint32_t set_margin_since_version = 1;

  /** \brief requests keyboard events
      \param keyboard_interactivity 

        Set how keyboard events are delivered to this surface. By default,
        layer shell surfaces do not receive keyboard events; this request can
        be used to change this.

        This setting is inherited by child surfaces set by the get_popup
        request.

        Layer surfaces receive pointer, touch, and tablet events normally. If
        you do not want to receive them, set the input region on your surface
        to an empty region.

        Keyboard interactivity is double-buffered, see wl_surface.commit.
      
  */
  void set_keyboard_interactivity(zwlr_layer_surface_v1_keyboard_interactivity const& keyboard_interactivity);

  /** \brief Minimum protocol version required for the \ref set_keyboard_interactivity function
  */
  static constexpr std::uint32_t set_keyboard_interactivity_since_version = 1;

  /** \brief assign this layer_surface as an xdg_popup parent
      \param popup 

        This assigns an xdg_popup's parent to this layer_surface.  This popup
        should have been created via xdg_surface::get_popup with the parent set
        to NULL, and this request must be invoked before committing the popup's
        initial state.

        See the documentation of xdg_popup for more details about what an
        xdg_popup is and how it is used.
      
  */
  void get_popup(xdg_popup_t const& popup);

  /** \brief Minimum protocol version required for the \ref get_popup function
  */
  static constexpr std::uint32_t get_popup_since_version = 1;

  /** \brief ack a configure event
      \param serial the serial from the configure event

        When a configure event is received, if a client commits the
        surface in response to the configure event, then the client
        must make an ack_configure request sometime before the commit
        request, passing along the serial of the configure event.

        If the client receives multiple configure events before it
        can respond to one, it only has to ack the last configure event.

        A client is not required to commit immediately after sending
        an ack_configure request - it may even ack_configure several times
        before its next surface commit.

        A client may send multiple ack_configure requests before committing, but
        only the last request sent before a commit indicates which configure
        event the client really is responding to.
      
  */
  void ack_configure(uint32_t serial);

  /** \brief Minimum protocol version required for the \ref ack_configure function
  */
  static constexpr std::uint32_t ack_configure_since_version = 1;

  /** \brief change the layer of the surface
      \param layer layer to move this surface to

        Change the layer that the surface is rendered on.

        Layer is double-buffered, see wl_surface.commit.
      
  */
  void set_layer(zwlr_layer_shell_v1_layer const& layer);

  /** \brief Minimum protocol version required for the \ref set_layer function
  */
  static constexpr std::uint32_t set_layer_since_version = 2;

  /** \brief Check whether the \ref set_layer function is available with
      the currently bound version of the protocol
  */
  bool can_set_layer() const;

  /** \brief suggest a surface change
      \param serial 
      \param width 
      \param height 

        The configure event asks the client to resize its surface.

        Clients should arrange their surface for the new states, and then send
        an ack_configure request with the serial sent in this configure event at
        some point before committing the new surface.

        The client is free to dismiss all but the last configure event it
        received.

        The width and height arguments specify the size of the window in
        surface-local coordinates.

        The size is a hint, in the sense that the client is free to ignore it if
        it doesn't resize, pick a smaller size (to satisfy aspect ratio or
        resize in steps of NxM pixels). If the client picks a smaller size and
        is anchored to two opposite anchors (e.g. 'top' and 'bottom'), the
        surface will be centered on this axis.

        If the width or height arguments are zero, it means the client should
        decide its own window dimension.
      
  */
  std::function<void(uint32_t, uint32_t, uint32_t)> &on_configure();

  /** \brief surface should be closed

        The closed event is sent by the compositor when the surface will no
        longer be shown. The output may have been destroyed or the user may
        have asked for it to be removed. Further changes to the surface will be
        ignored. The client should destroy the resource after receiving this
        event, and create a new surface if they so choose.
      
  */
  std::function<void()> &on_closed();

};

/** \brief types of keyboard interaction possible for a layer shell surface

        Types of keyboard interaction possible for layer shell surfaces. The
        rationale for this is twofold: (1) some applications are not interested
        in keyboard events and not allowing them to be focused can improve the
        desktop experience; (2) some applications will want to take exclusive
        keyboard focus.
      
  */
enum class zwlr_layer_surface_v1_keyboard_interactivity : uint32_t
  {
  none = 0,
  exclusive = 1,
  on_demand = 2
};

/** \brief 

  */
enum class zwlr_layer_surface_v1_error : uint32_t
  {
  /** \brief provided surface state is invalid */
  invalid_surface_state = 0,
  /** \brief size is invalid */
  invalid_size = 1,
  /** \brief anchor bitfield is invalid */
  invalid_anchor = 2,
  /** \brief keyboard interactivity is invalid */
  invalid_keyboard_interactivity = 3
};

/** \brief 

  */
struct zwlr_layer_surface_v1_anchor : public wayland::detail::bitfield<4, 4>
{
  zwlr_layer_surface_v1_anchor(const wayland::detail::bitfield<4, 4> &b)
    : wayland::detail::bitfield<4, 4>(b) {}
  zwlr_layer_surface_v1_anchor(const uint32_t value)
    : wayland::detail::bitfield<4, 4>(value) {}
  /** \brief the top edge of the anchor rectangle */
  static const wayland::detail::bitfield<4, 4> top;
  /** \brief the bottom edge of the anchor rectangle */
  static const wayland::detail::bitfield<4, 4> bottom;
  /** \brief the left edge of the anchor rectangle */
  static const wayland::detail::bitfield<4, 4> left;
  /** \brief the right edge of the anchor rectangle */
  static const wayland::detail::bitfield<4, 4> right;
};



}
