//
// DON'T EDIT. THIS FILE HAS BEEN GENERATED BY wayland-scanner++
//

#include <toplevel.h>

using namespace wayland;
using namespace wayland::detail;

const wl_interface* zwlr_foreign_toplevel_manager_v1_interface_stop_request[0] = {
};

const wl_interface* zwlr_foreign_toplevel_manager_v1_interface_toplevel_event[1] = {
  &zwlr_foreign_toplevel_handle_v1_interface,
};

const wl_interface* zwlr_foreign_toplevel_manager_v1_interface_finished_event[0] = {
};

const wl_message zwlr_foreign_toplevel_manager_v1_interface_requests[1] = {
  {
    "stop",
    "",
    zwlr_foreign_toplevel_manager_v1_interface_stop_request,
  },
};

const wl_message zwlr_foreign_toplevel_manager_v1_interface_events[2] = {
  {
    "toplevel",
    "n",
    zwlr_foreign_toplevel_manager_v1_interface_toplevel_event,
  },
  {
    "finished",
    "",
    zwlr_foreign_toplevel_manager_v1_interface_finished_event,
  },
};

const wl_interface wayland::detail::zwlr_foreign_toplevel_manager_v1_interface =
  {
    "zwlr_foreign_toplevel_manager_v1",
    3,
    1,
    zwlr_foreign_toplevel_manager_v1_interface_requests,
    2,
    zwlr_foreign_toplevel_manager_v1_interface_events,
  };

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_set_maximized_request[0] = {
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_unset_maximized_request[0] = {
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_set_minimized_request[0] = {
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_unset_minimized_request[0] = {
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_activate_request[1] = {
  &seat_interface,
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_close_request[0] = {
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_set_rectangle_request[5] = {
  &surface_interface,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_destroy_request[0] = {
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_set_fullscreen_request[1] = {
  &output_interface,
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_unset_fullscreen_request[0] = {
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_title_event[1] = {
  nullptr,
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_app_id_event[1] = {
  nullptr,
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_output_enter_event[1] = {
  &output_interface,
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_output_leave_event[1] = {
  &output_interface,
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_state_event[1] = {
  nullptr,
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_done_event[0] = {
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_closed_event[0] = {
};

const wl_interface* zwlr_foreign_toplevel_handle_v1_interface_parent_event[1] = {
  &zwlr_foreign_toplevel_handle_v1_interface,
};

const wl_message zwlr_foreign_toplevel_handle_v1_interface_requests[10] = {
  {
    "set_maximized",
    "",
    zwlr_foreign_toplevel_handle_v1_interface_set_maximized_request,
  },
  {
    "unset_maximized",
    "",
    zwlr_foreign_toplevel_handle_v1_interface_unset_maximized_request,
  },
  {
    "set_minimized",
    "",
    zwlr_foreign_toplevel_handle_v1_interface_set_minimized_request,
  },
  {
    "unset_minimized",
    "",
    zwlr_foreign_toplevel_handle_v1_interface_unset_minimized_request,
  },
  {
    "activate",
    "o",
    zwlr_foreign_toplevel_handle_v1_interface_activate_request,
  },
  {
    "close",
    "",
    zwlr_foreign_toplevel_handle_v1_interface_close_request,
  },
  {
    "set_rectangle",
    "oiiii",
    zwlr_foreign_toplevel_handle_v1_interface_set_rectangle_request,
  },
  {
    "destroy",
    "",
    zwlr_foreign_toplevel_handle_v1_interface_destroy_request,
  },
  {
    "set_fullscreen",
    "2?o",
    zwlr_foreign_toplevel_handle_v1_interface_set_fullscreen_request,
  },
  {
    "unset_fullscreen",
    "2",
    zwlr_foreign_toplevel_handle_v1_interface_unset_fullscreen_request,
  },
};

const wl_message zwlr_foreign_toplevel_handle_v1_interface_events[8] = {
  {
    "title",
    "s",
    zwlr_foreign_toplevel_handle_v1_interface_title_event,
  },
  {
    "app_id",
    "s",
    zwlr_foreign_toplevel_handle_v1_interface_app_id_event,
  },
  {
    "output_enter",
    "o",
    zwlr_foreign_toplevel_handle_v1_interface_output_enter_event,
  },
  {
    "output_leave",
    "o",
    zwlr_foreign_toplevel_handle_v1_interface_output_leave_event,
  },
  {
    "state",
    "a",
    zwlr_foreign_toplevel_handle_v1_interface_state_event,
  },
  {
    "done",
    "",
    zwlr_foreign_toplevel_handle_v1_interface_done_event,
  },
  {
    "closed",
    "",
    zwlr_foreign_toplevel_handle_v1_interface_closed_event,
  },
  {
    "parent",
    "3?o",
    zwlr_foreign_toplevel_handle_v1_interface_parent_event,
  },
};

const wl_interface wayland::detail::zwlr_foreign_toplevel_handle_v1_interface =
  {
    "zwlr_foreign_toplevel_handle_v1",
    3,
    10,
    zwlr_foreign_toplevel_handle_v1_interface_requests,
    8,
    zwlr_foreign_toplevel_handle_v1_interface_events,
  };

zwlr_foreign_toplevel_manager_v1_t::zwlr_foreign_toplevel_manager_v1_t(const proxy_t &p)
  : proxy_t(p)
{
  if(proxy_has_object() && get_wrapper_type() == wrapper_type::standard)
    {
      set_events(std::shared_ptr<detail::events_base_t>(new events_t), dispatcher);
    }
  set_interface(&zwlr_foreign_toplevel_manager_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_foreign_toplevel_manager_v1_t(p); });
}

zwlr_foreign_toplevel_manager_v1_t::zwlr_foreign_toplevel_manager_v1_t()
{
  set_interface(&zwlr_foreign_toplevel_manager_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_foreign_toplevel_manager_v1_t(p); });
}

zwlr_foreign_toplevel_manager_v1_t::zwlr_foreign_toplevel_manager_v1_t(zwlr_foreign_toplevel_manager_v1 *p, wrapper_type t)
  : proxy_t(reinterpret_cast<wl_proxy*> (p), t){
  if(proxy_has_object() && get_wrapper_type() == wrapper_type::standard)
    {
      set_events(std::shared_ptr<detail::events_base_t>(new events_t), dispatcher);
    }
  set_interface(&zwlr_foreign_toplevel_manager_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_foreign_toplevel_manager_v1_t(p); });
}

zwlr_foreign_toplevel_manager_v1_t::zwlr_foreign_toplevel_manager_v1_t(proxy_t const &wrapped_proxy, construct_proxy_wrapper_tag /*unused*/)
  : proxy_t(wrapped_proxy, construct_proxy_wrapper_tag()){
  set_interface(&zwlr_foreign_toplevel_manager_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_foreign_toplevel_manager_v1_t(p); });
}

zwlr_foreign_toplevel_manager_v1_t zwlr_foreign_toplevel_manager_v1_t::proxy_create_wrapper()
{
  return {*this, construct_proxy_wrapper_tag()};
}

const std::string zwlr_foreign_toplevel_manager_v1_t::interface_name = "zwlr_foreign_toplevel_manager_v1";

zwlr_foreign_toplevel_manager_v1_t::operator zwlr_foreign_toplevel_manager_v1*() const
{
  return reinterpret_cast<zwlr_foreign_toplevel_manager_v1*> (c_ptr());
}

void zwlr_foreign_toplevel_manager_v1_t::stop()
{
  marshal(0U);
}


std::function<void(zwlr_foreign_toplevel_handle_v1_t)> &zwlr_foreign_toplevel_manager_v1_t::on_toplevel()
{
  return std::static_pointer_cast<events_t>(get_events())->toplevel;
}

std::function<void()> &zwlr_foreign_toplevel_manager_v1_t::on_finished()
{
  return std::static_pointer_cast<events_t>(get_events())->finished;
}

int zwlr_foreign_toplevel_manager_v1_t::dispatcher(uint32_t opcode, const std::vector<any>& args, const std::shared_ptr<detail::events_base_t>& e)
{
  std::shared_ptr<events_t> events = std::static_pointer_cast<events_t>(e);
  switch(opcode)
    {
    case 0:
      if(events->toplevel) events->toplevel(zwlr_foreign_toplevel_handle_v1_t(args[0].get<proxy_t>()));
      break;
    case 1:
      if(events->finished) events->finished();
      break;
    }
  return 0;
}

zwlr_foreign_toplevel_handle_v1_t::zwlr_foreign_toplevel_handle_v1_t(const proxy_t &p)
  : proxy_t(p)
{
  if(proxy_has_object() && get_wrapper_type() == wrapper_type::standard)
    {
      set_events(std::shared_ptr<detail::events_base_t>(new events_t), dispatcher);
      set_destroy_opcode(7U);
    }
  set_interface(&zwlr_foreign_toplevel_handle_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_foreign_toplevel_handle_v1_t(p); });
}

zwlr_foreign_toplevel_handle_v1_t::zwlr_foreign_toplevel_handle_v1_t()
{
  set_interface(&zwlr_foreign_toplevel_handle_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_foreign_toplevel_handle_v1_t(p); });
}

zwlr_foreign_toplevel_handle_v1_t::zwlr_foreign_toplevel_handle_v1_t(zwlr_foreign_toplevel_handle_v1 *p, wrapper_type t)
  : proxy_t(reinterpret_cast<wl_proxy*> (p), t){
  if(proxy_has_object() && get_wrapper_type() == wrapper_type::standard)
    {
      set_events(std::shared_ptr<detail::events_base_t>(new events_t), dispatcher);
      set_destroy_opcode(7U);
    }
  set_interface(&zwlr_foreign_toplevel_handle_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_foreign_toplevel_handle_v1_t(p); });
}

zwlr_foreign_toplevel_handle_v1_t::zwlr_foreign_toplevel_handle_v1_t(proxy_t const &wrapped_proxy, construct_proxy_wrapper_tag /*unused*/)
  : proxy_t(wrapped_proxy, construct_proxy_wrapper_tag()){
  set_interface(&zwlr_foreign_toplevel_handle_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_foreign_toplevel_handle_v1_t(p); });
}

zwlr_foreign_toplevel_handle_v1_t zwlr_foreign_toplevel_handle_v1_t::proxy_create_wrapper()
{
  return {*this, construct_proxy_wrapper_tag()};
}

const std::string zwlr_foreign_toplevel_handle_v1_t::interface_name = "zwlr_foreign_toplevel_handle_v1";

zwlr_foreign_toplevel_handle_v1_t::operator zwlr_foreign_toplevel_handle_v1*() const
{
  return reinterpret_cast<zwlr_foreign_toplevel_handle_v1*> (c_ptr());
}

void zwlr_foreign_toplevel_handle_v1_t::set_maximized()
{
  marshal(0U);
}


void zwlr_foreign_toplevel_handle_v1_t::unset_maximized()
{
  marshal(1U);
}


void zwlr_foreign_toplevel_handle_v1_t::set_minimized()
{
  marshal(2U);
}


void zwlr_foreign_toplevel_handle_v1_t::unset_minimized()
{
  marshal(3U);
}


void zwlr_foreign_toplevel_handle_v1_t::activate(seat_t const& seat)
{
  marshal(4U, seat.proxy_has_object() ? reinterpret_cast<wl_object*>(seat.c_ptr()) : nullptr);
}


void zwlr_foreign_toplevel_handle_v1_t::close()
{
  marshal(5U);
}


void zwlr_foreign_toplevel_handle_v1_t::set_rectangle(surface_t const& surface, int32_t x, int32_t y, int32_t width, int32_t height)
{
  marshal(6U, surface.proxy_has_object() ? reinterpret_cast<wl_object*>(surface.c_ptr()) : nullptr, x, y, width, height);
}


void zwlr_foreign_toplevel_handle_v1_t::set_fullscreen(output_t const& output)
{
  marshal(8U, output.proxy_has_object() ? reinterpret_cast<wl_object*>(output.c_ptr()) : nullptr);
}

bool zwlr_foreign_toplevel_handle_v1_t::can_set_fullscreen() const
{
  return (get_version() >= set_fullscreen_since_version);
}


void zwlr_foreign_toplevel_handle_v1_t::unset_fullscreen()
{
  marshal(9U);
}

bool zwlr_foreign_toplevel_handle_v1_t::can_unset_fullscreen() const
{
  return (get_version() >= unset_fullscreen_since_version);
}


std::function<void(std::string)> &zwlr_foreign_toplevel_handle_v1_t::on_title()
{
  return std::static_pointer_cast<events_t>(get_events())->title;
}

std::function<void(std::string)> &zwlr_foreign_toplevel_handle_v1_t::on_app_id()
{
  return std::static_pointer_cast<events_t>(get_events())->app_id;
}

std::function<void(output_t)> &zwlr_foreign_toplevel_handle_v1_t::on_output_enter()
{
  return std::static_pointer_cast<events_t>(get_events())->output_enter;
}

std::function<void(output_t)> &zwlr_foreign_toplevel_handle_v1_t::on_output_leave()
{
  return std::static_pointer_cast<events_t>(get_events())->output_leave;
}

std::function<void(array_t)> &zwlr_foreign_toplevel_handle_v1_t::on_state()
{
  return std::static_pointer_cast<events_t>(get_events())->state;
}

std::function<void()> &zwlr_foreign_toplevel_handle_v1_t::on_done()
{
  return std::static_pointer_cast<events_t>(get_events())->done;
}

std::function<void()> &zwlr_foreign_toplevel_handle_v1_t::on_closed()
{
  return std::static_pointer_cast<events_t>(get_events())->closed;
}

std::function<void(zwlr_foreign_toplevel_handle_v1_t)> &zwlr_foreign_toplevel_handle_v1_t::on_parent()
{
  return std::static_pointer_cast<events_t>(get_events())->parent;
}

int zwlr_foreign_toplevel_handle_v1_t::dispatcher(uint32_t opcode, const std::vector<any>& args, const std::shared_ptr<detail::events_base_t>& e)
{
  std::shared_ptr<events_t> events = std::static_pointer_cast<events_t>(e);
  switch(opcode)
    {
    case 0:
      if(events->title) events->title(args[0].get<std::string>());
      break;
    case 1:
      if(events->app_id) events->app_id(args[0].get<std::string>());
      break;
    case 2:
      if(events->output_enter) events->output_enter(output_t(args[0].get<proxy_t>()));
      break;
    case 3:
      if(events->output_leave) events->output_leave(output_t(args[0].get<proxy_t>()));
      break;
    case 4:
      if(events->state) events->state(args[0].get<array_t>());
      break;
    case 5:
      if(events->done) events->done();
      break;
    case 6:
      if(events->closed) events->closed();
      break;
    case 7:
      if(events->parent) events->parent(zwlr_foreign_toplevel_handle_v1_t(args[0].get<proxy_t>()));
      break;
    }
  return 0;
}




