//
// DON'T EDIT. THIS FILE HAS BEEN GENERATED BY wayland-scanner++
//

#include <layer-shell.h>

using namespace wayland;
using namespace wayland::detail;

const wl_interface* zwlr_layer_shell_v1_interface_get_layer_surface_request[5] = {
  &zwlr_layer_surface_v1_interface,
  &surface_interface,
  &output_interface,
  nullptr,
  nullptr,
};

const wl_interface* zwlr_layer_shell_v1_interface_destroy_request[0] = {
};

const wl_message zwlr_layer_shell_v1_interface_requests[2] = {
  {
    "get_layer_surface",
    "no?ous",
    zwlr_layer_shell_v1_interface_get_layer_surface_request,
  },
  {
    "destroy",
    "3",
    zwlr_layer_shell_v1_interface_destroy_request,
  },
};

const wl_message zwlr_layer_shell_v1_interface_events[0] = {
};

const wl_interface wayland::detail::zwlr_layer_shell_v1_interface =
  {
    "zwlr_layer_shell_v1",
    4,
    2,
    zwlr_layer_shell_v1_interface_requests,
    0,
    zwlr_layer_shell_v1_interface_events,
  };

const wl_interface* zwlr_layer_surface_v1_interface_set_size_request[2] = {
  nullptr,
  nullptr,
};

const wl_interface* zwlr_layer_surface_v1_interface_set_anchor_request[1] = {
  nullptr,
};

const wl_interface* zwlr_layer_surface_v1_interface_set_exclusive_zone_request[1] = {
  nullptr,
};

const wl_interface* zwlr_layer_surface_v1_interface_set_margin_request[4] = {
  nullptr,
  nullptr,
  nullptr,
  nullptr,
};

const wl_interface* zwlr_layer_surface_v1_interface_set_keyboard_interactivity_request[1] = {
  nullptr,
};

const wl_interface* zwlr_layer_surface_v1_interface_get_popup_request[1] = {
  &xdg_popup_interface,
};

const wl_interface* zwlr_layer_surface_v1_interface_ack_configure_request[1] = {
  nullptr,
};

const wl_interface* zwlr_layer_surface_v1_interface_destroy_request[0] = {
};

const wl_interface* zwlr_layer_surface_v1_interface_set_layer_request[1] = {
  nullptr,
};

const wl_interface* zwlr_layer_surface_v1_interface_configure_event[3] = {
  nullptr,
  nullptr,
  nullptr,
};

const wl_interface* zwlr_layer_surface_v1_interface_closed_event[0] = {
};

const wl_message zwlr_layer_surface_v1_interface_requests[9] = {
  {
    "set_size",
    "uu",
    zwlr_layer_surface_v1_interface_set_size_request,
  },
  {
    "set_anchor",
    "u",
    zwlr_layer_surface_v1_interface_set_anchor_request,
  },
  {
    "set_exclusive_zone",
    "i",
    zwlr_layer_surface_v1_interface_set_exclusive_zone_request,
  },
  {
    "set_margin",
    "iiii",
    zwlr_layer_surface_v1_interface_set_margin_request,
  },
  {
    "set_keyboard_interactivity",
    "u",
    zwlr_layer_surface_v1_interface_set_keyboard_interactivity_request,
  },
  {
    "get_popup",
    "o",
    zwlr_layer_surface_v1_interface_get_popup_request,
  },
  {
    "ack_configure",
    "u",
    zwlr_layer_surface_v1_interface_ack_configure_request,
  },
  {
    "destroy",
    "",
    zwlr_layer_surface_v1_interface_destroy_request,
  },
  {
    "set_layer",
    "2u",
    zwlr_layer_surface_v1_interface_set_layer_request,
  },
};

const wl_message zwlr_layer_surface_v1_interface_events[2] = {
  {
    "configure",
    "uuu",
    zwlr_layer_surface_v1_interface_configure_event,
  },
  {
    "closed",
    "",
    zwlr_layer_surface_v1_interface_closed_event,
  },
};

const wl_interface wayland::detail::zwlr_layer_surface_v1_interface =
  {
    "zwlr_layer_surface_v1",
    4,
    9,
    zwlr_layer_surface_v1_interface_requests,
    2,
    zwlr_layer_surface_v1_interface_events,
  };

zwlr_layer_shell_v1_t::zwlr_layer_shell_v1_t(const proxy_t &p)
  : proxy_t(p)
{
  if(proxy_has_object() && get_wrapper_type() == wrapper_type::standard)
    {
      set_events(std::shared_ptr<detail::events_base_t>(new events_t), dispatcher);
      set_destroy_opcode(1U);
    }
  set_interface(&zwlr_layer_shell_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_layer_shell_v1_t(p); });
}

zwlr_layer_shell_v1_t::zwlr_layer_shell_v1_t()
{
  set_interface(&zwlr_layer_shell_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_layer_shell_v1_t(p); });
}

zwlr_layer_shell_v1_t::zwlr_layer_shell_v1_t(zwlr_layer_shell_v1 *p, wrapper_type t)
  : proxy_t(reinterpret_cast<wl_proxy*> (p), t){
  if(proxy_has_object() && get_wrapper_type() == wrapper_type::standard)
    {
      set_events(std::shared_ptr<detail::events_base_t>(new events_t), dispatcher);
      set_destroy_opcode(1U);
    }
  set_interface(&zwlr_layer_shell_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_layer_shell_v1_t(p); });
}

zwlr_layer_shell_v1_t::zwlr_layer_shell_v1_t(proxy_t const &wrapped_proxy, construct_proxy_wrapper_tag /*unused*/)
  : proxy_t(wrapped_proxy, construct_proxy_wrapper_tag()){
  set_interface(&zwlr_layer_shell_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_layer_shell_v1_t(p); });
}

zwlr_layer_shell_v1_t zwlr_layer_shell_v1_t::proxy_create_wrapper()
{
  return {*this, construct_proxy_wrapper_tag()};
}

const std::string zwlr_layer_shell_v1_t::interface_name = "zwlr_layer_shell_v1";

zwlr_layer_shell_v1_t::operator zwlr_layer_shell_v1*() const
{
  return reinterpret_cast<zwlr_layer_shell_v1*> (c_ptr());
}

zwlr_layer_surface_v1_t zwlr_layer_shell_v1_t::get_layer_surface(surface_t const& surface, output_t const& output, zwlr_layer_shell_v1_layer const& layer, std::string const& name_space)
{
  proxy_t p = marshal_constructor(0U, &zwlr_layer_surface_v1_interface, nullptr, surface.proxy_has_object() ? reinterpret_cast<wl_object*>(surface.c_ptr()) : nullptr, output.proxy_has_object() ? reinterpret_cast<wl_object*>(output.c_ptr()) : nullptr, static_cast<uint32_t>(layer), name_space);
  return zwlr_layer_surface_v1_t(p);
}


int zwlr_layer_shell_v1_t::dispatcher(uint32_t opcode, const std::vector<any>& args, const std::shared_ptr<detail::events_base_t>& e)
{
  return 0;
}



zwlr_layer_surface_v1_t::zwlr_layer_surface_v1_t(const proxy_t &p)
  : proxy_t(p)
{
  if(proxy_has_object() && get_wrapper_type() == wrapper_type::standard)
    {
      set_events(std::shared_ptr<detail::events_base_t>(new events_t), dispatcher);
      set_destroy_opcode(7U);
    }
  set_interface(&zwlr_layer_surface_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_layer_surface_v1_t(p); });
}

zwlr_layer_surface_v1_t::zwlr_layer_surface_v1_t()
{
  set_interface(&zwlr_layer_surface_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_layer_surface_v1_t(p); });
}

zwlr_layer_surface_v1_t::zwlr_layer_surface_v1_t(zwlr_layer_surface_v1 *p, wrapper_type t)
  : proxy_t(reinterpret_cast<wl_proxy*> (p), t){
  if(proxy_has_object() && get_wrapper_type() == wrapper_type::standard)
    {
      set_events(std::shared_ptr<detail::events_base_t>(new events_t), dispatcher);
      set_destroy_opcode(7U);
    }
  set_interface(&zwlr_layer_surface_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_layer_surface_v1_t(p); });
}

zwlr_layer_surface_v1_t::zwlr_layer_surface_v1_t(proxy_t const &wrapped_proxy, construct_proxy_wrapper_tag /*unused*/)
  : proxy_t(wrapped_proxy, construct_proxy_wrapper_tag()){
  set_interface(&zwlr_layer_surface_v1_interface);
  set_copy_constructor([] (const proxy_t &p) -> proxy_t
    { return zwlr_layer_surface_v1_t(p); });
}

zwlr_layer_surface_v1_t zwlr_layer_surface_v1_t::proxy_create_wrapper()
{
  return {*this, construct_proxy_wrapper_tag()};
}

const std::string zwlr_layer_surface_v1_t::interface_name = "zwlr_layer_surface_v1";

zwlr_layer_surface_v1_t::operator zwlr_layer_surface_v1*() const
{
  return reinterpret_cast<zwlr_layer_surface_v1*> (c_ptr());
}

void zwlr_layer_surface_v1_t::set_size(uint32_t width, uint32_t height)
{
  marshal(0U, width, height);
}


void zwlr_layer_surface_v1_t::set_anchor(zwlr_layer_surface_v1_anchor const& anchor)
{
  marshal(1U, static_cast<uint32_t>(anchor));
}


void zwlr_layer_surface_v1_t::set_exclusive_zone(int32_t zone)
{
  marshal(2U, zone);
}


void zwlr_layer_surface_v1_t::set_margin(int32_t top, int32_t right, int32_t bottom, int32_t left)
{
  marshal(3U, top, right, bottom, left);
}


void zwlr_layer_surface_v1_t::set_keyboard_interactivity(zwlr_layer_surface_v1_keyboard_interactivity const& keyboard_interactivity)
{
  marshal(4U, static_cast<uint32_t>(keyboard_interactivity));
}


void zwlr_layer_surface_v1_t::get_popup(xdg_popup_t const& popup)
{
  marshal(5U, popup.proxy_has_object() ? reinterpret_cast<wl_object*>(popup.c_ptr()) : nullptr);
}


void zwlr_layer_surface_v1_t::ack_configure(uint32_t serial)
{
  marshal(6U, serial);
}


void zwlr_layer_surface_v1_t::set_layer(zwlr_layer_shell_v1_layer const& layer)
{
  marshal(8U, static_cast<uint32_t>(layer));
}

bool zwlr_layer_surface_v1_t::can_set_layer() const
{
  return (get_version() >= set_layer_since_version);
}


std::function<void(uint32_t, uint32_t, uint32_t)> &zwlr_layer_surface_v1_t::on_configure()
{
  return std::static_pointer_cast<events_t>(get_events())->configure;
}

std::function<void()> &zwlr_layer_surface_v1_t::on_closed()
{
  return std::static_pointer_cast<events_t>(get_events())->closed;
}

int zwlr_layer_surface_v1_t::dispatcher(uint32_t opcode, const std::vector<any>& args, const std::shared_ptr<detail::events_base_t>& e)
{
  std::shared_ptr<events_t> events = std::static_pointer_cast<events_t>(e);
  switch(opcode)
    {
    case 0:
      if(events->configure) events->configure(args[0].get<uint32_t>(), args[1].get<uint32_t>(), args[2].get<uint32_t>());
      break;
    case 1:
      if(events->closed) events->closed();
      break;
    }
  return 0;
}


const bitfield<4, 4> zwlr_layer_surface_v1_anchor::top{1};
const bitfield<4, 4> zwlr_layer_surface_v1_anchor::bottom{2};
const bitfield<4, 4> zwlr_layer_surface_v1_anchor::left{4};
const bitfield<4, 4> zwlr_layer_surface_v1_anchor::right{8};



